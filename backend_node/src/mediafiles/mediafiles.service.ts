import { iResult } from '../entities/common';
import { CreateMediafileDto, Mediafile } from '../entities/mediafiles.entity';
import { MediafilesDbService } from './mediafiles.db.service';
import { Injectable, Logger } from '@nestjs/common';
import { getHashByPath } from '../napi/';
import * as fs from 'fs';
import * as path from 'path';
import axios from 'axios';

@Injectable()
export class MediafilesService {
  constructor(private readonly mediafilesDbService: MediafilesDbService) {}

  public async createOne(dto: CreateMediafileDto): Promise<iResult> {
    return this.mediafilesDbService.createOne(dto);
  }

  public async remove(id: string): Promise<iResult> {
    return this.mediafilesDbService.remove(id);
  }

  public async getAllByLinkId(linkId: string): Promise<Mediafile[]> {
    return this.mediafilesDbService.getAllByLinkId(linkId);
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.
   *
   * @param url - URL —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∞—á–∞—Ç—å.
   * @param filePath - –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª.
   * @param linkId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Å—ã–ª–∫–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
   * @returns –û–±—ä–µ–∫—Ç `CreateMediafileDto`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ,
   *          –∏–ª–∏ `null`, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
   *
   * üìå –î–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
   * - –°–æ–∑–¥–∞–µ—Ç –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ (`fs.createWriteStream`).
   * - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ `axios.get()` —Å `responseType: 'stream'`, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å.
   * - –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è `data`.
   * - –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à-—Å—É–º–º—É —Ñ–∞–π–ª–∞ (`getHashByPath`).
   * - –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç URL –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏.
   */
  public async downloadFile(url: string, filePath: string, linkId: string): Promise<CreateMediafileDto | null> {
    try {
      const writer = fs.createWriteStream(filePath);
      const response = await axios.get(url, {
        responseType: 'stream',
        headers: {
          'User-Agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
        },
      });

      let totalSize = 0;

      response.data.on('data', (chunk: Buffer) => (totalSize += chunk.length));

      response.data.pipe(writer);

      const size = await new Promise<number>((resolve, reject) => {
        writer.on('finish', () => resolve(totalSize));
        writer.on('error', reject);
      });

      const hash = await getHashByPath(filePath);
      const name = path.basename(filePath);

      return {
        name,
        path: filePath,
        hash,
        size,
        linkId,
      };
    } catch (error) {
      let message;
      if (error instanceof Error) {
        message = error.message;
      } else {
        message = String(error);
      }
      Logger.error(`\nurl: ${url}\n`, message);
      return null;
    }
  }
}
